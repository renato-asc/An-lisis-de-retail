# -*- coding: utf-8 -*-
"""Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13M05FEj50z_Giqx8-k4CZuc_yGm8Wkbz
"""

#Librerias
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

df = pd.read_csv("/content/Mall_Customers.csv")

df.head()

df.describe()

traducciones = {
    'CustomerID': 'IDCliente',
    'Gender': 'Genero',
    'Age': 'Edad',
    'Annual Income (k$)': 'Ingresos Anuales(u$)',
    'Spending Score (1-100)': 'Puntuación de Gastos (1-100)'
}

df = df.rename(columns=traducciones)

sns.histplot(df["Ingresos Anuales(u$)"], kde=True, stat="density").set_title('Distribución de Ingresos Anuales')

df.columns

columns= ['Edad', 'Ingresos Anuales(u$)','Puntuación de Gastos (1-100)']
for i in columns:
  plt.figure()
  plt.title(f'Distribución de {i} por género')
  sns.histplot(df[i], kde=True, stat="density")

df.head()

columns= ['Edad', 'Ingresos Anuales(u$)','Puntuación de Gastos (1-100)']
for i in columns:
  plt.figure()
  plt.title(f'Distribución de {i} por género')
  sns.kdeplot(x=df[i],fill = True, hue = df['Genero'])

columns= ['Edad', 'Ingresos Anuales(u$)','Puntuación de Gastos (1-100)']
for i in columns:
  plt.figure()
  plt.title(f'Distribución de {i} por género')
  sns.boxplot(data=df,x='Genero',y=df[i])

df['Genero'].value_counts(normalize=True)

"""# **Analisis bivariado**"""

df.columns

sns.scatterplot(data=df, x='Ingresos Anuales(u$)',y='Puntuación de Gastos (1-100)')
plt.title('Distribución entre ingresos anuales y puntuación de gastos')

#df=df.drop('IDCliente', axis=1)
sns.pairplot(df, hue='Genero').fig.suptitle('Análisis Bivariado')

df.groupby(['Genero'])['Edad', 'Ingresos Anuales(u$)','Puntuación de Gastos (1-100)'].mean()

df.corr(numeric_only=True)

sns.heatmap(df.corr(numeric_only=True),annot=True,cmap='coolwarm').set_title('Matriz de Correlación')

"""#Clustering - Univariado - Bivariado , Multivariado"""

clustering1 = KMeans(n_clusters=3)

clustering1.fit(df[['Ingresos Anuales(u$)']])

clustering1.labels_

df['Agrupación de Ingresos mediante K-Means'] = clustering1.labels_

df.head()

df['Agrupación de Ingresos mediante K-Means'].value_counts()

clustering1.inertia_

intertia_scores=[]
for i in range(1,11):
  kmeans=KMeans(n_clusters=i)
  kmeans.fit(df[['Ingresos Anuales(u$)']])
  intertia_scores.append(kmeans.inertia_)

intertia_scores

plt.plot(range(1,11),intertia_scores)
plt.xlabel('Número de Clústeres')
plt.ylabel('Inercia')
plt.title('Método del Codo para K-Means')



df.groupby('Agrupación de Ingresos mediante K-Means')[['Edad', 'Ingresos Anuales(u$)', 'Puntuación de Gastos (1-100)']].mean()

"""#Clustering Bivariado"""

clustering2 = KMeans(n_clusters=5)
clustering2.fit(df[['Ingresos Anuales(u$)', 'Puntuación de Gastos (1-100)']])
clustering2.labels_
df['Clúster de Gastos e Ingresos'] = clustering2.labels_
df.head()

intertia_scores2=[]
for i in range(1,11):
  kmeans2=KMeans(n_clusters=i)
  kmeans2.fit(df[['Ingresos Anuales(u$)', 'Puntuación de Gastos (1-100)']])
  intertia_scores2.append(kmeans2.inertia_)
plt.plot(range(1, 11), intertia_scores2)
plt.xlabel('Número de Clústeres')
plt.ylabel('Inercia')
plt.title('Método del Codo para K-Means (Bivariado)')

centers=pd.DataFrame(clustering2.cluster_centers_)
centers.columns=['x','y']

plt.figure(figsize=(10, 8))
plt.scatter(x=centers['x'],y=centers['y'],s=100,c='black',marker='*')
sns.scatterplot(data=df, x='Ingresos Anuales(u$)', y='Puntuación de Gastos (1-100)', hue='Clúster de Gastos e Ingresos', palette='tab10')
plt.title('Relación entre Ingresos Anuales, Puntuación de Gastos y Clústeres')
plt.xlabel('Ingresos Anuales (u$)')
plt.ylabel('Puntuación de Gastos (1-100)')
plt.savefig('clustering_bivariate.png')
plt.show()

pd.crosstab(df['Clúster de Gastos e Ingresos'],df['Genero'],normalize='index')

# Proporción de género en cada clúster bivariado
plt.figure()
pd.crosstab(df['Clúster de Gastos e Ingresos'], df['Genero'], normalize='index').plot(kind='bar', stacked=True).set_title('Proporción de Género en Clústeres Bivariados')

df.groupby('Clúster de Gastos e Ingresos')['Edad', 'Ingresos Anuales(u$)', 'Puntuación de Gastos (1-100)'].mean()

"""#Cluster Multivariado"""

from sklearn.preprocessing import StandardScaler

scale= StandardScaler()

df.head()

dff = pd.get_dummies(df, drop_first=True)
dff.head()

dff.columns

dff = dff[['Edad', 'Ingresos Anuales(u$)','Puntuación de Gastos (1-100)', 'Genero_Male']]
dff.head()

dff = scale.fit_transform(dff)

dff = pd.DataFrame(scale.fit_transform(dff))
dff.head()

inertia_scores3 = []

for i in range(1, 11):
    kmeans3 = KMeans(n_clusters=i, n_init=10)  # Establecer explícitamente n_init para evitar la advertencia
    kmeans3.fit(dff)
    inertia_scores3.append(kmeans3.inertia_)

plt.plot(range(1, 11), inertia_scores3)
plt.xlabel('Número de Clústeres')
plt.ylabel('Inercia')
plt.title('Método del Codo para Determinar el Número Óptimo de Clústeres')
plt.show()

df.to_csv("Clustering.csv")